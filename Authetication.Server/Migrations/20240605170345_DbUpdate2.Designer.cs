// <auto-generated />
using System;
using Authetication.Server.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Authetication.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240605170345_DbUpdate2")]
    partial class DbUpdate2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Authetication.Server.Models.Admin", b =>
                {
                    b.Property<int>("IdAdmin")
                        .HasColumnType("integer");

                    b.Property<string>("EmailAdmin")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("IdUser")
                        .HasColumnType("integer");

                    b.Property<string>("NomeAdmin")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("integer");

                    b.HasKey("IdAdmin");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Authetication.Server.Models.Coordenador", b =>
                {
                    b.Property<int>("IdCoordenador")
                        .HasColumnType("integer");

                    b.Property<string>("EmailCoordenador")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("IdUser")
                        .HasColumnType("integer");

                    b.Property<string>("NomeCoordenador")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("integer");

                    b.HasKey("IdCoordenador");

                    b.ToTable("Coordenadores");
                });

            modelBuilder.Entity("Authetication.Server.Models.Fisioterapeuta", b =>
                {
                    b.Property<int>("IdFisio")
                        .HasColumnType("integer");

                    b.Property<string>("EmailFisio")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("IdUser")
                        .HasColumnType("integer");

                    b.Property<int>("Matricula")
                        .HasColumnType("integer");

                    b.Property<string>("NomeFisio")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SemestreFisio")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("integer");

                    b.HasKey("IdFisio");

                    b.ToTable("Fisioterapeutas");
                });

            modelBuilder.Entity("Authetication.Server.Models.Paciente", b =>
                {
                    b.Property<int>("IdPaciente")
                        .HasColumnType("integer");

                    b.Property<string>("CPF")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataDeNascimento")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DiagnosticoClinico")
                        .HasColumnType("text");

                    b.Property<string>("DiagnosticoFisio")
                        .HasColumnType("text");

                    b.Property<string>("EmailPaciente")
                        .HasColumnType("text");

                    b.Property<string>("Endereco")
                        .HasColumnType("text");

                    b.Property<int?>("IdUser")
                        .HasColumnType("integer");

                    b.Property<string>("NomePaciente")
                        .HasColumnType("text");

                    b.Property<string>("NumeroCasa")
                        .HasColumnType("text");

                    b.Property<string>("Proficao")
                        .HasColumnType("text");

                    b.Property<char?>("Sexo")
                        .HasColumnType("character(1)");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("integer");

                    b.Property<string>("UF")
                        .HasColumnType("text");

                    b.HasKey("IdPaciente");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("Authetication.Server.Models.Usuario", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUser"));

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("IdUser");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Authetication.Server.Models.Admin", b =>
                {
                    b.HasOne("Authetication.Server.Models.Usuario", "Usuario")
                        .WithOne("Admin")
                        .HasForeignKey("Authetication.Server.Models.Admin", "IdAdmin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Authetication.Server.Models.Coordenador", b =>
                {
                    b.HasOne("Authetication.Server.Models.Usuario", "Usuario")
                        .WithOne("Coordenador")
                        .HasForeignKey("Authetication.Server.Models.Coordenador", "IdCoordenador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Authetication.Server.Models.Fisioterapeuta", b =>
                {
                    b.HasOne("Authetication.Server.Models.Usuario", "Usuario")
                        .WithOne("Fisioterapeuta")
                        .HasForeignKey("Authetication.Server.Models.Fisioterapeuta", "IdFisio")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Authetication.Server.Models.Paciente", b =>
                {
                    b.HasOne("Authetication.Server.Models.Usuario", "Usuario")
                        .WithOne("Paciente")
                        .HasForeignKey("Authetication.Server.Models.Paciente", "IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Authetication.Server.Models.Usuario", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Coordenador");

                    b.Navigation("Fisioterapeuta");

                    b.Navigation("Paciente");
                });
#pragma warning restore 612, 618
        }
    }
}
